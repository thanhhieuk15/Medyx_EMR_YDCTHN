// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Medyx_EMR_BCA.ApiAssets.StoreProcedureModels;
using System.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
namespace Medyx_EMR_BCA.ApiAssets.StoreProcedureModels
{
    public partial class Medyx_EMR_BCAContext
    {
        private IMedyx_EMR_BCAContextProcedures _procedures;

        public virtual IMedyx_EMR_BCAContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Medyx_EMR_BCAContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMedyx_EMR_BCAContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Query<sp_GetAllMenuByUserIDResult>();
            modelBuilder.Query<sp_GetAllActionByRoleIDResult>();
            modelBuilder.Query<spACCOUNT_GetResult>();
            modelBuilder.Query<spDMAction_GetByRoleResult>();
            modelBuilder.Query<spDMCHUCDanh_CREATEResult>();
            modelBuilder.Query<spDMCHUCDANH_GetAllResult>();
            modelBuilder.Query<spDMCHUCDANH_GetAllPagingResult>();
            modelBuilder.Query<spDMCHUCVU_CREATEResult>();
            modelBuilder.Query<spDMCHUCVU_GetResult>();
            modelBuilder.Query<spDMCHUCVU_GetAllResult>();
            modelBuilder.Query<spDMCHUCVU_GetAllPagingResult>();
            modelBuilder.Query<spDMCHUYENMON_GetAllResult>();
            modelBuilder.Query<spDMDMKhoa_Buong_ImportResult>();
            modelBuilder.Query<spDMKHOA_GetAllResult>();
            modelBuilder.Query<spDMNhanVien_CreateResult>();
            modelBuilder.Query<spDMNHANVIEN_GetAllResult>();
            modelBuilder.Query<spDMNhanVien_GetAllPagingResult>();
            modelBuilder.Query<spDMNhanVien_ImportResult>();
            modelBuilder.Query<spDMRole_GetResult>();
            modelBuilder.Query<spDMRole_GetAllResult>();
            modelBuilder.Query<spDMRole_GetAllPagingResult>();
            modelBuilder.Query<spDMRole_UpdateResult>();
            modelBuilder.Query<spDMTHUOC_Donvitinh_ImportResult>();
            modelBuilder.Query<spDMVTYT_Donvitinh_ImportResult>();
            modelBuilder.Query<spMenu_GetByRoleResult>();
            modelBuilder.Query<spTraceLog_GetAllPagingResult>();
            modelBuilder.Query<spTraceLogKieuTacDong_GetAllResult>();
            modelBuilder.Query<spTraceLogTableName_GetAllResult>();
            modelBuilder.Query<Token_API_GetTokenResult>();
            modelBuilder.Query<Token_API_GetTokenValidByNgayResult>();
        }
    }

    public partial class Medyx_EMR_BCAContextProcedures : IMedyx_EMR_BCAContextProcedures
    {
        private readonly Medyx_EMR_BCAContext _context;

        public Medyx_EMR_BCAContextProcedures(Medyx_EMR_BCAContext context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_CAPMAAsync(string TENBANG, string MADAU, string MACUOI, byte? LENMACUOI, string WHERE, OutputParameter<string> MA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterMA = new SqlParameter
            {
                ParameterName = "MA",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = MA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TENBANG",
                    Size = 60,
                    Value = TENBANG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MADAU",
                    Size = 100,
                    Value = MADAU ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MACUOI",
                    Size = 100,
                    Value = MACUOI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LENMACUOI",
                    Value = LENMACUOI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "WHERE",
                    Size = 1000,
                    Value = WHERE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterMA,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[sp_CAPMA] @TENBANG, @MADAU, @MACUOI, @LENMACUOI, @WHERE, @MA OUTPUT", sqlParameters, cancellationToken);

            MA.SetValue(parameterMA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAllActionByRoleIDResult>> sp_GetAllActionByRoleIDAsync(string Account, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Account",
                    Size = 200,
                    Value = Account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAllActionByRoleIDResult>("EXEC @returnValue = [dbo].[sp_GetAllActionByRoleID] @Account", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAllMenuByUserIDResult>> sp_GetAllMenuByUserIDAsync(string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 256,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAllMenuByUserIDResult>("EXEC @returnValue = [dbo].[sp_GetAllMenuByUserID] @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spACCOUNT_GetResult>> spACCOUNT_GetAsync(string ACCOUNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ACCOUNT",
                    Size = 200,
                    Value = ACCOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spACCOUNT_GetResult>("EXEC @returnValue = [dbo].[spACCOUNT_Get] @ACCOUNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spACCOUNT_ResetPassWordAsync(string maNV, string Account, string passwordCu, string password, string mamay, string nguoiSD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "maNV",
                    Size = 12,
                    Value = maNV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Account",
                    Size = 200,
                    Value = Account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "passwordCu",
                    Size = 200,
                    Value = passwordCu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 200,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mamay",
                    Size = 40,
                    Value = mamay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nguoiSD",
                    Size = 12,
                    Value = nguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spACCOUNT_ResetPassWord] @maNV, @Account, @passwordCu, @password, @mamay, @nguoiSD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spBenhan_Tiensubenh_Benhphoihop_CreateOrUpdateAsync(DataTable tmp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableBenhan_Tiensubenh_Benhphoihop]",
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spBenhan_Tiensubenh_Benhphoihop_CreateOrUpdate] @tmp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMAction_GetByRoleResult>> spDMAction_GetByRoleAsync(string marole, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "marole",
                    Size = 256,
                    Value = marole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMAction_GetByRoleResult>("EXEC @returnValue = [dbo].[spDMAction_GetByRole] @marole", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMChephamMau_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableChephamMau]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMChephamMau_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCDanh_CREATEResult>> spDMCHUCDanh_CREATEAsync(string TENCD, string MAMAY, string NGUOISD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TENCD",
                    Size = 300,
                    Value = TENCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCDanh_CREATEResult>("EXEC @returnValue = [dbo].[spDMCHUCDanh_CREATE] @TENCD, @MAMAY, @NGUOISD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMCHUCDanh_DELETEDAsync(string MAMAY, string NGUOISD, string MaCD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaCD",
                    Size = 10,
                    Value = MaCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMCHUCDanh_DELETED] @MAMAY, @NGUOISD, @MaCD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMChucDanh_ExportByColumnAsync(string dk, string Column, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dk",
                    Size = -1,
                    Value = dk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Column",
                    Size = -1,
                    Value = Column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMChucDanh_ExportByColumn] @dk, @Column", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCDANH_GetAllResult>> spDMCHUCDANH_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCDANH_GetAllResult>("EXEC @returnValue = [dbo].[spDMCHUCDANH_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCDANH_GetAllPagingResult>> spDMCHUCDANH_GetAllPagingAsync(string MaCD, string TenCD, string MaMay, string NgaySD, string NguoiSD, int? PageIndex, int? PageSize, bool? add, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MaCD",
                    Size = 400,
                    Value = MaCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TenCD",
                    Size = 400,
                    Value = TenCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 400,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NgaySD",
                    Size = 400,
                    Value = NgaySD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 400,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add",
                    Value = add ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCDANH_GetAllPagingResult>("EXEC @returnValue = [dbo].[spDMCHUCDANH_GetAllPaging] @MaCD, @TenCD, @MaMay, @NgaySD, @NguoiSD, @PageIndex, @PageSize, @add", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMChucDanh_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableChucDanh]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMChucDanh_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMCHUCDanh_UPDATEAsync(string MACD, string TENCD, string MAMAY, string NGUOISD, bool? huy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MACD",
                    Size = 10,
                    Value = MACD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TENCD",
                    Size = 300,
                    Value = TENCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "huy",
                    Value = huy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMCHUCDanh_UPDATE] @MACD, @TENCD, @MAMAY, @NGUOISD, @huy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCVU_CREATEResult>> spDMCHUCVU_CREATEAsync(string TENCV, string MAMAY, string NGUOISD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TENCV",
                    Size = 300,
                    Value = TENCV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCVU_CREATEResult>("EXEC @returnValue = [dbo].[spDMCHUCVU_CREATE] @TENCV, @MAMAY, @NGUOISD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMCHUCVU_DELETEDAsync(string MAMAY, string NGUOISD, string MaCV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaCV",
                    Size = 10,
                    Value = MaCV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMCHUCVU_DELETED] @MAMAY, @NGUOISD, @MaCV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMChucVu_ExportByColumnAsync(string dk, string Column, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dk",
                    Size = -1,
                    Value = dk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Column",
                    Size = -1,
                    Value = Column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMChucVu_ExportByColumn] @dk, @Column", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMCHUCVU_FINDSAsync(string DK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DK",
                    Size = 2000,
                    Value = DK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMCHUCVU_FINDS] @DK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCVU_GetResult>> spDMCHUCVU_GetAsync(string MACV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MACV",
                    Size = 10,
                    Value = MACV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCVU_GetResult>("EXEC @returnValue = [dbo].[spDMCHUCVU_Get] @MACV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCVU_GetAllResult>> spDMCHUCVU_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCVU_GetAllResult>("EXEC @returnValue = [dbo].[spDMCHUCVU_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUCVU_GetAllPagingResult>> spDMCHUCVU_GetAllPagingAsync(string maCV, string tenCV, string maMay, string ngaySD, string nguoiSD, int? PageIndex, int? PageSize, int? add, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "maCV",
                    Size = 400,
                    Value = maCV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tenCV",
                    Size = 400,
                    Value = tenCV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maMay",
                    Size = 400,
                    Value = maMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ngaySD",
                    Size = 400,
                    Value = ngaySD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nguoiSD",
                    Size = 400,
                    Value = nguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add",
                    Value = add ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUCVU_GetAllPagingResult>("EXEC @returnValue = [dbo].[spDMCHUCVU_GetAllPaging] @maCV, @tenCV, @maMay, @ngaySD, @nguoiSD, @PageIndex, @PageSize, @add", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMChucVu_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableChucVu]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMChucVu_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMCHUCVU_UPDATEAsync(string MACV, string TENCV, string MAMAY, string NGUOISD, bool? huy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MACV",
                    Size = 10,
                    Value = MACV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TENCV",
                    Size = 300,
                    Value = TENCV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "huy",
                    Value = huy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMCHUCVU_UPDATE] @MACV, @TENCV, @MAMAY, @NGUOISD, @huy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMCHUYENMON_GetAllResult>> spDMCHUYENMON_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMCHUYENMON_GetAllResult>("EXEC @returnValue = [dbo].[spDMCHUYENMON_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichVu_CHUNGLOAI_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichVu_CHUNGLOAI]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichVu_CHUNGLOAI_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichVu_CS_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichVu_CS]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichVu_CS_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichVu_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichVu]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichVu_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichVu_LoaiHinh_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichVu_LoaiHinh]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichVu_LoaiHinh_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichVu_Nhom_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichVu_Nhom]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichVu_Nhom_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMDichvu_PhanLoaiPTTT_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMDichvu_PhanLoaiPTTT]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMDichvu_PhanLoaiPTTT_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMDMKhoa_Buong_ImportResult>> spDMDMKhoa_Buong_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableBuong]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMDMKhoa_Buong_ImportResult>("EXEC @returnValue = [dbo].[spDMDMKhoa_Buong_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMKHOA_GetAllResult>> spDMKHOA_GetAllAsync(bool? qadmin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "qadmin",
                    Value = qadmin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMKHOA_GetAllResult>("EXEC @returnValue = [dbo].[spDMKHOA_GetAll] @qadmin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMKhoa_Giuong_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableGiuong]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMKhoa_Giuong_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMKhoa_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableKhoa]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMKhoa_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMNhanVien_CreateResult>> spDMNhanVien_CreateAsync(string HoTen, string MaChucVu, string MaChuyenMon, string MaKhoa, string MaMay, string NguoiSD, int? MaQL, string MaCD, string TenTat, string GhiChu, string idnhanvien, string manv1, string maRole, string Account, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HoTen",
                    Size = 300,
                    Value = HoTen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChucVu",
                    Size = 8,
                    Value = MaChucVu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChuyenMon",
                    Size = 30,
                    Value = MaChuyenMon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaKhoa",
                    Size = 12,
                    Value = MaKhoa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 40,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 12,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaQL",
                    Value = MaQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaCD",
                    Size = 10,
                    Value = MaCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TenTat",
                    Size = 100,
                    Value = TenTat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GhiChu",
                    Size = 1000,
                    Value = GhiChu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idnhanvien",
                    Size = 60,
                    Value = idnhanvien ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manv1",
                    Size = 100,
                    Value = manv1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maRole",
                    Size = 256,
                    Value = maRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Account",
                    Size = 200,
                    Value = Account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 200,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMNhanVien_CreateResult>("EXEC @returnValue = [dbo].[spDMNhanVien_Create] @HoTen, @MaChucVu, @MaChuyenMon, @MaKhoa, @MaMay, @NguoiSD, @MaQL, @MaCD, @TenTat, @GhiChu, @idnhanvien, @manv1, @maRole, @Account, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMNhanVien_DELETEDAsync(string manv, string MaMay, string NguoiSD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "manv",
                    Size = 400,
                    Value = manv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 40,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 12,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMNhanVien_DELETED] @manv, @MaMay, @NguoiSD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMNhanVien_ExportByColumnAsync(string dk, string Column, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dk",
                    Size = -1,
                    Value = dk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Column",
                    Size = -1,
                    Value = Column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMNhanVien_ExportByColumn] @dk, @Column", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMNHANVIEN_GetAllResult>> spDMNHANVIEN_GetAllAsync(bool? QADMIN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QADMIN",
                    Value = QADMIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMNHANVIEN_GetAllResult>("EXEC @returnValue = [dbo].[spDMNHANVIEN_GetAll] @QADMIN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMNhanVien_GetAllPagingResult>> spDMNhanVien_GetAllPagingAsync(string MaNV, string IDNhanVien, string HoTen, string MaChucVu, string MaChuyenMon, string MaKhoa, string MaMay, string NgaySD, string NguoiSD, string NguoiSD1, string NgaySD1, string MaQL, string MaCD, string TenTat, string GhiChu, string MaNV1, string account, string password, string tenrole, int? PageIndex, int? PageSize, int? add, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MaNV",
                    Size = 400,
                    Value = MaNV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDNhanVien",
                    Size = 400,
                    Value = IDNhanVien ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HoTen",
                    Size = 400,
                    Value = HoTen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChucVu",
                    Size = 400,
                    Value = MaChucVu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChuyenMon",
                    Size = 400,
                    Value = MaChuyenMon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaKhoa",
                    Size = 400,
                    Value = MaKhoa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 400,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NgaySD",
                    Size = 400,
                    Value = NgaySD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 400,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD1",
                    Size = 400,
                    Value = NguoiSD1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NgaySD1",
                    Size = 400,
                    Value = NgaySD1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaQL",
                    Size = 400,
                    Value = MaQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaCD",
                    Size = 400,
                    Value = MaCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TenTat",
                    Size = 400,
                    Value = TenTat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GhiChu",
                    Size = 400,
                    Value = GhiChu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaNV1",
                    Size = 400,
                    Value = MaNV1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account",
                    Size = 400,
                    Value = account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 400,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tenrole",
                    Size = 400,
                    Value = tenrole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add",
                    Value = add ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMNhanVien_GetAllPagingResult>("EXEC @returnValue = [dbo].[spDMNhanVien_GetAllPaging] @MaNV, @IDNhanVien, @HoTen, @MaChucVu, @MaChuyenMon, @MaKhoa, @MaMay, @NgaySD, @NguoiSD, @NguoiSD1, @NgaySD1, @MaQL, @MaCD, @TenTat, @GhiChu, @MaNV1, @account, @password, @tenrole, @PageIndex, @PageSize, @add", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMNhanVien_ImportResult>> spDMNhanVien_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableNhanVien]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMNhanVien_ImportResult>("EXEC @returnValue = [dbo].[spDMNhanVien_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMNhanVien_UpdateAsync(string manv, string HoTen, string MaChucVu, string MaChuyenMon, string MaKhoa, string MaMay, string NguoiSD, int? MaQL, string MaCD, string TenTat, string GhiChu, string idnhanvien, string manv1, string maRole, string Account, string password, bool? huy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "manv",
                    Size = 12,
                    Value = manv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HoTen",
                    Size = 300,
                    Value = HoTen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChucVu",
                    Size = 8,
                    Value = MaChucVu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaChuyenMon",
                    Size = 30,
                    Value = MaChuyenMon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaKhoa",
                    Size = 12,
                    Value = MaKhoa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 40,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 12,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaQL",
                    Value = MaQL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaCD",
                    Size = 10,
                    Value = MaCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TenTat",
                    Size = 100,
                    Value = TenTat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GhiChu",
                    Size = 1000,
                    Value = GhiChu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idnhanvien",
                    Size = 60,
                    Value = idnhanvien ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manv1",
                    Size = 100,
                    Value = manv1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maRole",
                    Size = 256,
                    Value = maRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Account",
                    Size = 200,
                    Value = Account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 200,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "huy",
                    Value = huy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMNhanVien_Update] @manv, @HoTen, @MaChucVu, @MaChuyenMon, @MaKhoa, @MaMay, @NguoiSD, @MaQL, @MaCD, @TenTat, @GhiChu, @idnhanvien, @manv1, @maRole, @Account, @password, @huy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMPhauThuat_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMPhauThuat]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMPhauThuat_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMRole_CREATEAsync(string TENRole, string MAMAY, string NGUOISD, DataTable tmpMenuRole, DataTable tmpActionRole, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TENRole",
                    Size = 300,
                    Value = TENRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tmpMenuRole",
                    Value = tmpMenuRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableMenuRole]",
                },
                new SqlParameter
                {
                    ParameterName = "tmpActionRole",
                    Value = tmpActionRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableActionRole]",
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMRole_CREATE] @TENRole, @MAMAY, @NGUOISD, @tmpMenuRole, @tmpActionRole", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMRole_DELETEDAsync(string MaRole, string MAMAY, string NGUOISD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MaRole",
                    Size = 256,
                    Value = MaRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMRole_DELETED] @MaRole, @MAMAY, @NGUOISD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMRole_GetResult>> spDMRole_GetAsync(string MaRole, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MaRole",
                    Size = 256,
                    Value = MaRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMRole_GetResult>("EXEC @returnValue = [dbo].[spDMRole_Get] @MaRole", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMRole_GetAllResult>> spDMRole_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMRole_GetAllResult>("EXEC @returnValue = [dbo].[spDMRole_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMRole_GetAllPagingResult>> spDMRole_GetAllPagingAsync(string maRole, string tenRole, string maMay, string ngaySD, string nguoiSD, int? PageIndex, int? PageSize, int? add, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "maRole",
                    Size = 400,
                    Value = maRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tenRole",
                    Size = 400,
                    Value = tenRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maMay",
                    Size = 400,
                    Value = maMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ngaySD",
                    Size = 400,
                    Value = ngaySD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nguoiSD",
                    Size = 400,
                    Value = nguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add",
                    Value = add ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMRole_GetAllPagingResult>("EXEC @returnValue = [dbo].[spDMRole_GetAllPaging] @maRole, @tenRole, @maMay, @ngaySD, @nguoiSD, @PageIndex, @PageSize, @add", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMRole_UpdateResult>> spDMRole_UpdateAsync(string ApplicationRolesId, string TENRole, bool? Huy, string MAMAY, string NGUOISD, DataTable tmpMenuRole, DataTable tmpActionRole, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationRolesId",
                    Size = 256,
                    Value = ApplicationRolesId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TENRole",
                    Size = 300,
                    Value = TENRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Huy",
                    Value = Huy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "MAMAY",
                    Size = 40,
                    Value = MAMAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NGUOISD",
                    Size = 12,
                    Value = NGUOISD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tmpMenuRole",
                    Value = tmpMenuRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableMenuRole]",
                },
                new SqlParameter
                {
                    ParameterName = "tmpActionRole",
                    Value = tmpActionRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableActionRole]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMRole_UpdateResult>("EXEC @returnValue = [dbo].[spDMRole_Update] @ApplicationRolesId, @TENRole, @Huy, @MAMAY, @NGUOISD, @tmpMenuRole, @tmpActionRole", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMTHUOC_CHUNGLOAI_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_CHUNGLOAI]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMTHUOC_CHUNGLOAI_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMTHUOC_DangBaoChe_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_DangBaoChe]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMTHUOC_DangBaoChe_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMTHUOC_Donvitinh_ImportResult>> spDMTHUOC_Donvitinh_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_Donvitinh]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMTHUOC_Donvitinh_ImportResult>("EXEC @returnValue = [dbo].[spDMTHUOC_Donvitinh_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMTHUOC_DuongDung_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_DuongDung]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMTHUOC_DuongDung_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMThuoc_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMThuoc]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMThuoc_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMTHUOC_NhaSX_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_NhaSX]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMTHUOC_NhaSX_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMTHUOC_Nhom_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMTHUOC_Nhom]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMTHUOC_Nhom_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMThuoc_PhanLoai_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMThuoc_PhanLoai]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMThuoc_PhanLoai_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spDMVTYT_Donvitinh_ImportResult>> spDMVTYT_Donvitinh_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMVTYT_Donvitinh]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spDMVTYT_Donvitinh_ImportResult>("EXEC @returnValue = [dbo].[spDMVTYT_Donvitinh_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMVTYT_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableVTYT]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMVTYT_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spDMVTYT_Nhom_ImportAsync(DataTable tmp, bool? insert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tmp",
                    Value = tmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TableDMVTYT_Nhom]",
                },
                new SqlParameter
                {
                    ParameterName = "insert",
                    Value = insert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlCommandAsync("EXEC @returnValue = [dbo].[spDMVTYT_Nhom_Import] @tmp, @insert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spMenu_GetByRoleResult>> spMenu_GetByRoleAsync(string marole, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "marole",
                    Size = 256,
                    Value = marole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spMenu_GetByRoleResult>("EXEC @returnValue = [dbo].[spMenu_GetByRole] @marole", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spTraceLog_GetAllPagingResult>> spTraceLog_GetAllPagingAsync(string tenbang, string mabn, string kieutacdong, string MaMay, DateTime? tungay, DateTime? denngay, string NgaySD, string NguoiSD, int? PageIndex, int? PageSize, bool? add, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tenbang",
                    Size = 400,
                    Value = tenbang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mabn",
                    Size = 400,
                    Value = mabn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "kieutacdong",
                    Size = 400,
                    Value = kieutacdong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaMay",
                    Size = 400,
                    Value = MaMay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tungay",
                    Value = tungay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denngay",
                    Value = denngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NgaySD",
                    Size = 400,
                    Value = NgaySD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NguoiSD",
                    Size = 400,
                    Value = NguoiSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add",
                    Value = add ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spTraceLog_GetAllPagingResult>("EXEC @returnValue = [dbo].[spTraceLog_GetAllPaging] @tenbang, @mabn, @kieutacdong, @MaMay, @tungay, @denngay, @NgaySD, @NguoiSD, @PageIndex, @PageSize, @add", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spTraceLogKieuTacDong_GetAllResult>> spTraceLogKieuTacDong_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spTraceLogKieuTacDong_GetAllResult>("EXEC @returnValue = [dbo].[spTraceLogKieuTacDong_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spTraceLogTableName_GetAllResult>> spTraceLogTableName_GetAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spTraceLogTableName_GetAllResult>("EXEC @returnValue = [dbo].[spTraceLogTableName_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Token_API_GetTokenResult>> Token_API_GetTokenAsync(string Account, DateTime? Ngay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Account",
                    Size = 1000,
                    Value = Account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ngay",
                    Value = Ngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Token_API_GetTokenResult>("EXEC @returnValue = [dbo].[Token_API_GetToken] @Account, @Ngay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Token_API_GetTokenValidByNgayResult>> Token_API_GetTokenValidByNgayAsync(string Token, DateTime? Ngay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Token",
                    Size = 1000,
                    Value = Token ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ngay",
                    Value = Ngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Token_API_GetTokenValidByNgayResult>("EXEC @returnValue = [dbo].[Token_API_GetTokenValidByNgay] @Token, @Ngay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
